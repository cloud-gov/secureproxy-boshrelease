worker_processes 4;

error_log stderr notice;

worker_rlimit_nofile 40000;

events {
  worker_connections  16383;
  multi_accept        on;
  use                 epoll;
}

http {

  ##
  # Basic stuff
  ##

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 1200;
  types_hash_max_size 2048;
  map_hash_bucket_size 128;
  server_tokens off;

  # see https://stackoverflow.com/a/37656784
  resolver 127.0.0.11 ipv6=off;

  default_type application/octet-stream;
  types {
    text/plain log;
    text/plain asc;
  }

  ##
  # Logging
  ##

  log_format  main  '$remote_addr - [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" $request_time '
            '$upstream_response_time $pipe';

  access_log /dev/stdout;

  ##
  # Gzip
  ##

  gzip on;
  gzip_disable "msie6";
  gzip_vary on;
  gzip_types  text/plain text/css application/x-javascript application/json text/xml application/xml application/xml+rss text/javascript application/rss+xml application/javascript;


  ##
  # Timeout variables (currently disabled)
  ##

  client_body_timeout 10m;
  client_max_body_size 1024m;

  large_client_header_buffers 4 16k;

  # Add map for websockets
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # Add secure header values if not set upstream, else add headers with the
  # implicit default value of empty string, which is ignored by the `add_header`
  # directive.
  map $upstream_http_strict_transport_security $sts {
    '' 'max-age=31536000';
  }
  map $upstream_http_x_frame_options $frame_options {
    default    '$upstream_http_x_frame_options';
    ''         'DENY';
    'ALLOWALL' '';
  }
  map $upstream_http_x_content_type_options $content_type_options {
    '' 'nosniff';
  }
  map $upstream_http_content_type $default_content_type {
    '' 'text/plain; charset=utf-8';
  }
  map $upstream_status $mapped_content_type {
    default '$default_content_type';
    '204' '';
    '304' '';
  }

  include /etc/nginx/conf.d/*.conf;

  server {
    listen 8081;

    set $backend "http://node:3000";

    # proxy all traffic
    location / {

      root   /usr/local/openresty/nginx/html;
      index  index.html index.htm;

      ##
      # Security
      ##

      add_header Strict-Transport-Security $sts always;
      add_header X-Content-Type-Options $content_type_options always;
      add_header Content-Type $mapped_content_type always;

      header_filter_by_lua_block {
        if ngx.var.upstream_http_content_type == nil and ngx.var.mapped_content_type == "" then
          ngx.log(ngx.NOTICE, "no Content-Type header was mapped for upstream status code ", ngx.var.upstream_status)
        end
      }

      proxy_buffering             off;
      proxy_buffer_size           16k;
      proxy_buffers               4 16k;
      proxy_http_version          1.1;
      proxy_set_header            Upgrade $http_upgrade;
      proxy_set_header            Connection $connection_upgrade;
      proxy_set_header            Host $host;
      proxy_set_header            Proxy "";
      proxy_redirect              off;
      proxy_pass_request_headers  on;
      proxy_connect_timeout       10;
      proxy_read_timeout          600;
      proxy_pass                  $backend;
    }
  }
}
